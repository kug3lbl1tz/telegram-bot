# main.py
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    KeyboardButton, 
    ReplyKeyboardMarkup
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes, 
    CallbackQueryHandler
)

from config import TOKEN, ADMIN_ID, ACCESS_USERS, REQUESTS
from print_request import PrintRequest
from storage import save_requests, load_requests


# ====== Startup ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context._user_id in ACCESS_USERS:
        await update.message.reply_text("–ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —Ç—ã –∞–¥–º–∏–Ω, –∏ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–µ—á–∞—Ç—å!")

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞! \n\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        reply_markup=persistent_keyboard()
    )


# ====== Button Handler ======
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    match query.data:
        case "send_file":
            context.user_data["awaiting_file"] = True
            await query.message.reply_text(
                "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ñ–∞–π–ª.\n\n–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–∏–ø –ø–µ—á–∞—Ç–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–º–µ—Å—Ç–µ —Å —Ñ–∞–π–ª–æ–º."
            )
        case "instructions":
            await query.message.reply_text(
                "üìù –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤—Å—ë –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞."
            )
        case "pricing":
            await query.message.reply_text("üí∞ 15—Ä/–ª–∏—Å—Ç, –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –ø–µ—á–∞—Ç—å 20—Ä/–ª–∏—Å—Ç")
        case "contact":
            await query.message.reply_text(f"üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: {ADMIN_ID}")
        case "requests":
            await query.message.reply_text(
                f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(REQUESTS)}",
                reply_markup=get_requests()
            )

    # Admin request view
    if query.data.startswith("raise_request:"):
        req_id = query.data.split(":")[1]

        decisions = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{req_id}"),
                InlineKeyboardButton("‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{req_id}")
            ]
        ])

        request = next((r for r in REQUESTS if r.id == req_id), None)

        if request:
            await query.message.reply_document(
                document=request.file_id,
                caption=f"""üìÑ –ó–∞–ø—Ä–æ—Å –æ—Ç @{request.username}
\n–ü–æ–¥–ø–∏—Å—å: {request.caption or "‚Äî"}""",
                reply_markup=decisions
            )
        else:
            await query.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # Approve / Reject actions
    actions = ["approve", "reject"]
    if any(query.data.startswith(f"{a}:") for a in actions):
        action, req_id = query.data.split(":")
        request = next((r for r in REQUESTS if r.id == req_id), None)

        if not request:
            await query.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        context.user_data["awaiting_comment"] = {
            "action": action,
            "req_id": req_id
        }

        await query.message.reply_text(
            f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ {action.upper()} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç @{request.username}:"
        )


# ====== Text Handler ======
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_comment"):
        await handle_admin_comment(update, context)
        return
    await reply_keyboard_handler(update, context)


async def reply_keyboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ú–µ–Ω—é":
        keyboard = [
            [InlineKeyboardButton("üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–ø–µ—á–∞—Ç–∫—É", callback_data="send_file")],
            [InlineKeyboardButton("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é", callback_data="instructions")],
            [InlineKeyboardButton("üí∞ –†–∞—Å—Ü–µ–Ω–∫–∏", callback_data="pricing")],
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="contact")],
        ]
        if context._user_id in ACCESS_USERS:
            keyboard.append([InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–µ—á–∞—Ç—å", callback_data="requests")])

        kb_buttons = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é", reply_markup=kb_buttons)


# ====== File Handler ======
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_file"):
        file = await update.message.document.get_file()

        # Send to admins
        for trusted_user in ACCESS_USERS:
            await context.bot.send_document(
                chat_id=trusted_user,
                document=file.file_id,
                caption=f"""–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—á–∞—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{update.message.from_user.username}
\n\n–ü–æ–¥–ø–∏—Å—å: {update.message.caption or "‚Äî"}"""
            )

        request = PrintRequest(
            update.message.from_user.username,
            context._user_id,
            file.file_id,
            update.message.caption
        )
        REQUESTS.append(request)
        save_requests(REQUESTS)

        await update.message.reply_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω: {update.message.document.file_name}")
        context.user_data["awaiting_file"] = False


# ====== Comment Handler ======
async def handle_admin_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get("awaiting_comment")
    if not state:
        return

    req_id = state["req_id"]
    action = state["action"]
    comment = update.message.text

    request = next((r for r in REQUESTS if r.id == req_id), None)
    if not request:
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        context.user_data.pop("awaiting_comment", None)
        return

    # Update status
    request.status = "approved" if action == "approve" else "denied"

    # Send result back to customer
    result_text = (
        f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
        if action == "approve"
        else f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    )

    await context.bot.send_document(
        chat_id=request.user_id,
        document=request.file_id,
        caption=result_text,
    )

    # Confirm to admin
    await update.message.reply_text(f"üì§ {action.upper()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{request.username}.")

    # Clear state & persist
    context.user_data.pop("awaiting_comment", None)
    REQUESTS.remove(request)
    save_requests(REQUESTS)


# ====== Helpers ======
def persistent_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("–ú–µ–Ω—é")]], resize_keyboard=True)

def get_requests():
    requests_keyboard = [
        [InlineKeyboardButton(r.username, callback_data=f"raise_request:{r.id}")]
        for r in REQUESTS
    ]
    return InlineKeyboardMarkup(requests_keyboard)


# ====== Main ======
def main():
    # Load persisted requests at startup
    REQUESTS[:] = load_requests()

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
